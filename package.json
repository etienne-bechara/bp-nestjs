{
  "name": "bp-nestjs",
  "version": "0.1.0",
  "description": "Full back-end boilerplate based on NestJS and MikroORM. Written in TypeScript.",
  "author": {
    "name": "Etienne Bechara",
    "email": "et.rodrigues@hotmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/etienne-bechara/bp-nestjs"
  },
  "license": "MIT",
  "engines": {
    "node": ">=14.0.0",
    "npm": ">=6.0.0"
  },
  "scripts": {
    "==== Build & Run ====": "",
    "build": "nest build",
    "dev": "npm start",
    "start": "tsnd --exit-child --transpile-only --inspect=0.0.0.0:9229 ./source/core/main.ts",
    "start:dist": "node ./source/core/main.js || node ./build/source/core/main.js",
    "start:docker": "npm run build && docker build -t bp-nestjs build && docker run -it -p 8080:8080 bp-nestjs",
    "==== Lint & Test ====": "",
    "lint": "eslint **/*.ts",
    "lint:fix": "eslint **/*.ts --fix",
    "test": "jest --verbose --forceExit --passWithNoTests",
    "test:watch": "jest --verbose --watch",
    "test:coverage": "jest --coverage --passWithNoTests",
    "==== Package Update ====": "",
    "update:patch": "ncu -u --semverLevel minor && npm i && npm audit fix",
    "update:minor": "ncu -u --semverLevel major && npm i && npm audit fix",
    "update:major": "ncu -u && npm i && npm audit fix --force",
    "==== Boilerplate Config ====": "",
    "boilerplate:setup": "npm i && cp-cli .env.schema .env && npm run boilerplate:rename && npm run boilerplate:update",
    "boilerplate:rename": "git remote rename origin boilerplate && git remote set-url --push boilerplate no_push && git checkout -b master",
    "boilerplate:update": "git fetch boilerplate && git merge boilerplate/main",
    "==== Boilerplate Removal ====": "",
    "uninstall:orm": "npm un @mikro-orm/core @mikro-orm/mysql @mikro-orm/nestjs @mikro-orm/cli && rimraf source/core/orm && rimraf migration && rimraf template/crud",
    "uninstall:redis": "npm un ioredis @types/ioredis && rimraf source/core/redis",
    "uninstall:sentry": "npm un @sentry/node && rimraf source/core/sentry",
    "==== Template Generation ====": "",
    "template:api": "ts-node ./template/template.cli -t api",
    "template:bare": "ts-node ./template/template.cli -t bare",
    "template:crud": "ts-node ./template/template.cli -t crud",
    "==== Migration Dump ====": "",
    "migration:dump:dev": "npm run migration:set:dev && mikro-orm schema:update --dump",
    "migration:dump:stg": "npm run migration:set:stg && mikro-orm schema:update --dump",
    "migration:dump:prd": "npm run migration:set:prd && mikro-orm schema:update --dump",
    "==== Migration Sync ====": "",
    "migration:sync:dev": "npm run migration:dump:dev && mikro-orm schema:update --run",
    "migration:sync:stg": "npm run migration:dump:stg && mikro-orm schema:update --run",
    "migration:sync:prd": "npm run migration:dump:prd && mikro-orm schema:update --run",
    "==== Migration Create ====": "",
    "migration:create:dev": "npm run migration:set:dev && mikro-orm migration:create",
    "migration:create:stg": "npm run migration:set:stg && mikro-orm migration:create",
    "migration:create:prd": "npm run migration:set:prd && mikro-orm migration:create",
    "==== Migration Up ====": "",
    "migration:up": "(mikro-orm -v && mikro-orm migration:up) || (echo ORM not installed, skipping migrations... && exit 0)",
    "==== Migration Helpers ====": "",
    "migration:set:dev": "npm run build && cp-cli .env build/.env",
    "migration:set:stg": "npm run build && cp-cli .env.staging build/.env",
    "migration:set:prd": "npm run build && cp-cli .env.production build/.env"
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged --allow-empty"
    }
  },
  "lint-staged": {
    "*.ts": "eslint --cache --fix"
  },
  "mikro-orm": {
    "useTsNode": true,
    "configPaths": [
      "./build/source/core/orm/orm.config.migration.js"
    ]
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node",
    "rootDir": "source",
    "testRegex": ".spec.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    }
  },
  "dependencies": {
    "@mikro-orm/core": "4.0.7",
    "@mikro-orm/mysql": "4.0.7",
    "@mikro-orm/nestjs": "4.2.0",
    "@nestjs/common": "7.4.4",
    "@nestjs/core": "7.4.4",
    "@nestjs/platform-express": "7.4.4",
    "@sentry/node": "5.25.0",
    "axios": "0.20.0",
    "chalk": "4.1.0",
    "class-transformer": "0.3.1",
    "class-validator": "0.12.2",
    "clean-stack": "3.0.0",
    "dotenv": "8.2.0",
    "flat": "5.0.2",
    "globby": "11.0.1",
    "ioredis": "4.17.3",
    "jsonwebtoken": "8.5.1",
    "moment": "2.29.1",
    "qs": "6.9.4",
    "reflect-metadata": "0.1.13",
    "request-ip": "2.1.3",
    "rxjs": "6.6.3",
    "source-map-support": "0.5.19",
    "uuid": "8.3.1"
  },
  "devDependencies": {
    "@mikro-orm/cli": "4.0.7",
    "@nestjs/cli": "7.5.1",
    "@nestjs/schematics": "7.1.2",
    "@nestjs/testing": "7.4.4",
    "@types/express": "4.17.8",
    "@types/flat": "5.0.1",
    "@types/fs-extra": "9.0.2",
    "@types/ioredis": "4.17.5",
    "@types/jest": "26.0.14",
    "@types/jsonwebtoken": "8.5.0",
    "@types/node": "14.11.8",
    "@types/supertest": "2.0.10",
    "@types/uuid": "8.3.0",
    "@typescript-eslint/eslint-plugin": "4.4.0",
    "@typescript-eslint/parser": "4.4.0",
    "change-case": "4.1.1",
    "cp-cli": "2.0.0",
    "eslint": "7.11.0",
    "eslint-plugin-jest": "24.1.0",
    "eslint-plugin-jsdoc": "30.6.4",
    "eslint-plugin-more": "1.0.0",
    "eslint-plugin-promise": "4.2.1",
    "eslint-plugin-simple-import-sort": "5.0.3",
    "eslint-plugin-unicorn": "22.0.0",
    "eslint-plugin-unused-imports": "0.1.3",
    "fs-extra": "9.0.1",
    "husky": "4.3.0",
    "jest": "26.5.3",
    "lint-staged": "10.4.0",
    "npm-check-updates": "9.0.4",
    "rimraf": "3.0.2",
    "supertest": "5.0.0",
    "ts-jest": "26.4.1",
    "ts-loader": "8.0.4",
    "ts-node": "9.0.0",
    "ts-node-dev": "1.0.0-pre.63",
    "tsconfig-paths": "3.9.0",
    "typescript": "4.0.3",
    "yargs": "16.0.3"
  }
}
